/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2024-08-13 10:03:06.156536
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5;
x0=IKsin(j[1]);
x1=IKsin(j[2]);
x2=IKcos(j[1]);
x3=IKcos(j[2]);
x4=((0.355)*x0);
x5=((0.355)*x2);
eetrans[0]=((-0.568225)+(((-1.0)*j[0])));
eetrans[1]=(((x1*x5))+(((-1.0)*x3*x4))+(((0.362)*x0)));
eetrans[2]=((-0.134)+((x1*x4))+(((-0.362)*x2))+((x3*x5)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 3; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x33000003; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_px=((0.134)+pz);
new_py=py;
new_pz=((-0.452975)+(((-1.0)*px)));
px = new_px; py = new_py; pz = new_pz;
pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=((-0.11525)+pz);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
cj2array[0]=((1.05186974749047)+(((7.78149560345498)*j0*pz))+(((-3.89074780172749)*(py*py)))+(((-3.89074780172749)*(px*px)))+(((-3.89074780172749)*(j0*j0)))+(((-3.89074780172749)*(pz*pz))));
if( cj2array[0] >= -1-IKFAST_SINCOS_THRESH && cj2array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j2valid[0] = j2valid[1] = true;
    j2array[0] = IKacos(cj2array[0]);
    sj2array[0] = IKsin(j2array[0]);
    cj2array[1] = cj2array[0];
    j2array[1] = -j2array[0];
    sj2array[1] = -sj2array[0];
}
else if( isnan(cj2array[0]) )
{
    // probably any value will work
    j2valid[0] = true;
    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
}
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j1eval[3];
IkReal x6=py*py;
IkReal x7=px*px;
IkReal x8=((71.0)*sj2);
IkReal x9=((71.0)*cj2);
j1eval[0]=(x7+x6);
j1eval[1]=IKsign(((((200.0)*x6))+(((200.0)*x7))));
j1eval[2]=((IKabs(((((-72.4)*px))+((py*x8))+((px*x9)))))+(IKabs(((((72.4)*py))+((px*x8))+(((-1.0)*py*x9))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
IkReal x10=(px*sj2);
IkReal x11=(cj2*py);
j1eval[0]=((((-1.01971830985915)*py))+x11+x10);
j1eval[1]=IKsign(((((-72.4)*py))+(((71.0)*x10))+(((71.0)*x11))));
j1eval[2]=((IKabs(((((-25.702)*sj2))+(((25.205)*cj2*sj2))+(((200.0)*px*py)))))+(IKabs(((-26.2088)+(((-25.205)*(cj2*cj2)))+(((51.404)*cj2))+(((200.0)*(px*px)))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=((((1.01971830985915)*px))+(((-1.0)*cj2*px))+((py*sj2)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x12=px*px;
IkReal x13=((py*py)+x12);
if((x13) < -0.00001)
continue;
IkReal x14=IKabs(IKsqrt(x13));
IkReal x20 = x13;
if(IKabs(x20)==0){
continue;
}
IkReal x15=pow(x20,-0.5);
CheckValue<IkReal> x21=IKPowWithIntegerCheck(x14,-1);
if(!x21.valid){
continue;
}
IkReal x16=x21.value;
if((((1.0)+(((-1.03982543146201)*x12*(x16*x16))))) < -0.00001)
continue;
IkReal x17=IKsqrt(((1.0)+(((-1.03982543146201)*x12*(x16*x16)))));
IkReal x18=((1.01971830985915)*x15*x16);
IkReal x19=(x15*x17);
CheckValue<IkReal> x22 = IKatan2WithCheck(IkReal(((-1.0)*px)),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x22.valid){
continue;
}
if( (((1.01971830985915)*px*x16)) < -1-IKFAST_SINCOS_THRESH || (((1.01971830985915)*px*x16)) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst0=((((-1.0)*(x22.value)))+(((-1.0)*(IKasin(((1.01971830985915)*px*x16))))));
IkReal gconst1=(((px*x19))+(((-1.0)*px*py*x18)));
IkReal gconst2=(((py*x19))+((x12*x18)));
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x23=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x23.valid){
continue;
}
if( (((1.01971830985915)*px*(x23.value))) < -1-IKFAST_SINCOS_THRESH || (((1.01971830985915)*px*(x23.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x24 = IKatan2WithCheck(IkReal(((-1.0)*px)),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x24.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((IKasin(((1.01971830985915)*px*(x23.value))))+(x24.value)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
IkReal x25=px*px;
CheckValue<IkReal> x35 = IKatan2WithCheck(IkReal(((-1.0)*px)),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x35.valid){
continue;
}
IkReal x26=((1.0)*(x35.value));
IkReal x27=x13;
if((x27) < -0.00001)
continue;
IkReal x28=IKabs(IKsqrt(x27));
IkReal x36 = x27;
if(IKabs(x36)==0){
continue;
}
IkReal x29=pow(x36,-0.5);
CheckValue<IkReal> x37=IKPowWithIntegerCheck(x28,-1);
if(!x37.valid){
continue;
}
IkReal x30=x37.value;
IkReal x31=(px*x30);
if((((1.0)+(((-1.03982543146201)*x25*(x30*x30))))) < -0.00001)
continue;
IkReal x32=IKsqrt(((1.0)+(((-1.03982543146201)*x25*(x30*x30)))));
IkReal x33=((1.01971830985915)*x29*x30);
IkReal x34=(x29*x32);
sj2=gconst1;
cj2=gconst2;
if( (((1.01971831342099)*x31)) < -1-IKFAST_SINCOS_THRESH || (((1.01971831342099)*x31)) > 1+IKFAST_SINCOS_THRESH )
    continue;
j2=((((-1.0)*x26))+(((-1.0)*(IKasin(((1.01971831342099)*x31))))));
if( (((1.01971830985915)*x31)) < -1-IKFAST_SINCOS_THRESH || (((1.01971830985915)*x31)) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst0=((((-1.0)*x26))+(((-1.0)*(IKasin(((1.01971830985915)*x31))))));
IkReal gconst1=(((px*x34))+(((-1.01971830985915)*py*x29*x31)));
IkReal gconst2=(((py*x34))+((x25*x33)));
IkReal x38=py*py;
IkReal x39=px*px;
j1eval[0]=(x39+x38);
j1eval[1]=IKsign(((((200.0)*x39))+(((200.0)*x38))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x40=IKPowWithIntegerCheck(IKsign(((((-71.0)*gconst2*py))+(((72.4)*py))+(((-71.0)*gconst1*px)))),-1);
if(!x40.valid){
continue;
}
CheckValue<IkReal> x41 = IKatan2WithCheck(IkReal(((26.2088)+(((-200.0)*(px*px)))+(((25.205)*(gconst2*gconst2)))+(((-51.404)*gconst2)))),IkReal(((((25.702)*gconst1))+(((-25.205)*gconst1*gconst2))+(((-200.0)*px*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x41.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x40.value)))+(x41.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x42=IKcos(j1);
IkReal x43=IKsin(j1);
IkReal x44=((1.0)*px);
IkReal x45=((1.0)*py);
IkReal x46=((0.355)*x42);
IkReal x47=((0.355)*x43);
IkReal x48=(py*x43);
evalcond[0]=((-0.362)+(((0.355)*gconst2))+(((-1.0)*x42*x44))+x48);
evalcond[1]=((((0.355)*gconst1))+(((-1.0)*x42*x45))+(((-1.0)*x43*x44)));
evalcond[2]=((((-1.0)*gconst1*x47))+(((0.362)*x42))+px+(((-1.0)*gconst2*x46)));
evalcond[3]=((((0.362)*x43))+(((-1.0)*x45))+((gconst1*x46))+(((-1.0)*gconst2*x47)));
evalcond[4]=((-0.005019)+(((0.724)*x48))+(((-1.0)*py*x45))+(((-0.724)*px*x42))+(((-1.0)*px*x44)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x49=((71.0)*gconst1);
IkReal x50=((71.0)*gconst2);
CheckValue<IkReal> x51 = IKatan2WithCheck(IkReal(((((72.4)*py))+((px*x49))+(((-1.0)*py*x50)))),IkReal((((py*x49))+((px*x50))+(((-72.4)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x51.valid){
continue;
}
CheckValue<IkReal> x52=IKPowWithIntegerCheck(IKsign(((((200.0)*(py*py)))+(((200.0)*(px*px))))),-1);
if(!x52.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x51.value)+(((1.5707963267949)*(x52.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x53=IKcos(j1);
IkReal x54=IKsin(j1);
IkReal x55=((1.0)*px);
IkReal x56=((1.0)*py);
IkReal x57=((0.355)*x53);
IkReal x58=((0.355)*x54);
IkReal x59=(py*x54);
evalcond[0]=((-0.362)+(((-1.0)*x53*x55))+(((0.355)*gconst2))+x59);
evalcond[1]=((((-1.0)*x53*x56))+(((0.355)*gconst1))+(((-1.0)*x54*x55)));
evalcond[2]=((((-1.0)*gconst1*x58))+(((0.362)*x53))+(((-1.0)*gconst2*x57))+px);
evalcond[3]=((((0.362)*x54))+(((-1.0)*gconst2*x58))+((gconst1*x57))+(((-1.0)*x56)));
evalcond[4]=((-0.005019)+(((-1.0)*px*x55))+(((0.724)*x59))+(((-1.0)*py*x56))+(((-0.724)*px*x53)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x60=px*px;
IkReal x61=((py*py)+x60);
if((x61) < -0.00001)
continue;
IkReal x62=IKabs(IKsqrt(x61));
IkReal x69 = x61;
if(IKabs(x69)==0){
continue;
}
IkReal x63=pow(x69,-0.5);
IkReal x64=(py*x63);
CheckValue<IkReal> x70=IKPowWithIntegerCheck(x62,-1);
if(!x70.valid){
continue;
}
IkReal x65=x70.value;
IkReal x66=((1.01971830985915)*x65);
if((((1.0)+(((-1.03982543146201)*x60*(x65*x65))))) < -0.00001)
continue;
IkReal x67=IKsqrt(((1.0)+(((-1.03982543146201)*x60*(x65*x65)))));
IkReal x68=((1.0)*x67);
if( ((px*x66)) < -1-IKFAST_SINCOS_THRESH || ((px*x66)) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x71 = IKatan2WithCheck(IkReal(((-1.0)*px)),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x71.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(IKasin((px*x66)))+(((-1.0)*(x71.value))));
IkReal gconst4=((((-1.0)*px*x64*x66))+(((-1.0)*px*x63*x68)));
IkReal gconst5=(((x60*x63*x66))+(((-1.0)*x64*x68)));
CheckValue<IkReal> x72 = IKatan2WithCheck(IkReal(((-1.0)*px)),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x72.valid){
continue;
}
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x73=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x73.valid){
continue;
}
if( (((1.01971830985915)*px*(x73.value))) < -1-IKFAST_SINCOS_THRESH || (((1.01971830985915)*px*(x73.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x72.value)+(((-1.0)*(IKasin(((1.01971830985915)*px*(x73.value))))))+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
IkReal x74=px*px;
CheckValue<IkReal> x84 = IKatan2WithCheck(IkReal(((-1.0)*px)),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x84.valid){
continue;
}
IkReal x75=((1.0)*(x84.value));
IkReal x76=x61;
if((x76) < -0.00001)
continue;
IkReal x77=IKabs(IKsqrt(x76));
IkReal x85 = x76;
if(IKabs(x85)==0){
continue;
}
IkReal x78=pow(x85,-0.5);
IkReal x79=(py*x78);
CheckValue<IkReal> x86=IKPowWithIntegerCheck(x77,-1);
if(!x86.valid){
continue;
}
IkReal x80=x86.value;
IkReal x81=((1.01971830985915)*x80);
if((((1.0)+(((-1.03982543146201)*x74*(x80*x80))))) < -0.00001)
continue;
IkReal x82=IKsqrt(((1.0)+(((-1.03982543146201)*x74*(x80*x80)))));
IkReal x83=((1.0)*x82);
sj2=gconst4;
cj2=gconst5;
if( (((1.01971831342099)*px*x80)) < -1-IKFAST_SINCOS_THRESH || (((1.01971831342099)*px*x80)) > 1+IKFAST_SINCOS_THRESH )
    continue;
j2=((3.14159265)+(((-1.0)*x75))+(IKasin(((1.01971831342099)*px*x80))));
if( ((px*x81)) < -1-IKFAST_SINCOS_THRESH || ((px*x81)) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x75))+(IKasin((px*x81))));
IkReal gconst4=((((-1.0)*px*x78*x83))+(((-1.0)*px*x79*x81)));
IkReal gconst5=(((x74*x78*x81))+(((-1.0)*x79*x83)));
IkReal x87=py*py;
IkReal x88=px*px;
j1eval[0]=(x88+x87);
j1eval[1]=IKsign(((((200.0)*x87))+(((200.0)*x88))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x89 = IKatan2WithCheck(IkReal(((26.2088)+(((-200.0)*(px*px)))+(((25.205)*(gconst5*gconst5)))+(((-51.404)*gconst5)))),IkReal(((((25.702)*gconst4))+(((-25.205)*gconst4*gconst5))+(((-200.0)*px*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x89.valid){
continue;
}
CheckValue<IkReal> x90=IKPowWithIntegerCheck(IKsign(((((72.4)*py))+(((-71.0)*gconst5*py))+(((-71.0)*gconst4*px)))),-1);
if(!x90.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x89.value)+(((1.5707963267949)*(x90.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x91=IKcos(j1);
IkReal x92=IKsin(j1);
IkReal x93=((1.0)*px);
IkReal x94=((1.0)*py);
IkReal x95=((0.355)*gconst4);
IkReal x96=((0.355)*gconst5);
IkReal x97=(py*x92);
evalcond[0]=((-0.362)+(((-1.0)*x91*x93))+x97+x96);
evalcond[1]=((((-1.0)*x91*x94))+x95+(((-1.0)*x92*x93)));
evalcond[2]=((((-1.0)*x91*x96))+px+(((-1.0)*x92*x95))+(((0.362)*x91)));
evalcond[3]=((((-1.0)*x92*x96))+(((0.362)*x92))+(((-1.0)*x94))+((x91*x95)));
evalcond[4]=((-0.005019)+(((0.724)*x97))+(((-0.724)*px*x91))+(((-1.0)*px*x93))+(((-1.0)*py*x94)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x98=((71.0)*gconst5);
IkReal x99=((71.0)*gconst4);
CheckValue<IkReal> x100 = IKatan2WithCheck(IkReal(((((72.4)*py))+((px*x99))+(((-1.0)*py*x98)))),IkReal((((py*x99))+(((-72.4)*px))+((px*x98)))),IKFAST_ATAN2_MAGTHRESH);
if(!x100.valid){
continue;
}
CheckValue<IkReal> x101=IKPowWithIntegerCheck(IKsign(((((200.0)*(py*py)))+(((200.0)*(px*px))))),-1);
if(!x101.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x100.value)+(((1.5707963267949)*(x101.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x102=IKcos(j1);
IkReal x103=IKsin(j1);
IkReal x104=((1.0)*px);
IkReal x105=((1.0)*py);
IkReal x106=((0.355)*gconst4);
IkReal x107=((0.355)*gconst5);
IkReal x108=(py*x103);
evalcond[0]=((-0.362)+x108+x107+(((-1.0)*x102*x104)));
evalcond[1]=(x106+(((-1.0)*x103*x104))+(((-1.0)*x102*x105)));
evalcond[2]=((((0.362)*x102))+px+(((-1.0)*x103*x106))+(((-1.0)*x102*x107)));
evalcond[3]=((((0.362)*x103))+(((-1.0)*x105))+((x102*x106))+(((-1.0)*x103*x107)));
evalcond[4]=((-0.005019)+(((-1.0)*px*x104))+(((0.724)*x108))+(((-0.724)*px*x102))+(((-1.0)*py*x105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x109=py*py;
IkReal x110=((px*px)+x109);
IkReal x117 = x110;
if(IKabs(x117)==0){
continue;
}
IkReal x111=pow(x117,-0.5);
if((x110) < -0.00001)
continue;
IkReal x112=IKabs(IKsqrt(x110));
CheckValue<IkReal> x118=IKPowWithIntegerCheck(x112,-1);
if(!x118.valid){
continue;
}
IkReal x113=x118.value;
IkReal x114=((1.01971830985915)*x113);
if((((1.0)+(((-1.03982543146201)*x109*(x113*x113))))) < -0.00001)
continue;
IkReal x115=IKsqrt(((1.0)+(((-1.03982543146201)*x109*(x113*x113)))));
IkReal x116=(x111*x115);
if( ((py*x114)) < -1-IKFAST_SINCOS_THRESH || ((py*x114)) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x119 = IKatan2WithCheck(IkReal(py),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x119.valid){
continue;
}
IkReal gconst6=((IKasin((py*x114)))+(((-1.0)*(x119.value))));
IkReal gconst7=(((px*py*x111*x114))+(((-1.0)*py*x116)));
IkReal gconst8=(((x109*x111*x114))+((px*x116)));
CheckValue<IkReal> x120 = IKatan2WithCheck(IkReal(py),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x120.valid){
continue;
}
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x121=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x121.valid){
continue;
}
if( (((1.01971830985915)*py*(x121.value))) < -1-IKFAST_SINCOS_THRESH || (((1.01971830985915)*py*(x121.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x120.value)+j2+(((-1.0)*(IKasin(((1.01971830985915)*py*(x121.value)))))))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
IkReal x122=py*py;
CheckValue<IkReal> x132 = IKatan2WithCheck(IkReal(py),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x132.valid){
continue;
}
IkReal x123=((1.0)*(x132.value));
IkReal x124=x110;
IkReal x133 = x124;
if(IKabs(x133)==0){
continue;
}
IkReal x125=pow(x133,-0.5);
if((x124) < -0.00001)
continue;
IkReal x126=IKabs(IKsqrt(x124));
IkReal x127=((1.01971830985915)*x125);
CheckValue<IkReal> x134=IKPowWithIntegerCheck(x126,-1);
if(!x134.valid){
continue;
}
IkReal x128=x134.value;
IkReal x129=(py*x128);
if((((1.0)+(((-1.03982543146201)*x122*(x128*x128))))) < -0.00001)
continue;
IkReal x130=IKsqrt(((1.0)+(((-1.03982543146201)*x122*(x128*x128)))));
IkReal x131=(x125*x130);
sj2=gconst7;
cj2=gconst8;
if( (((1.01971831342099)*x129)) < -1-IKFAST_SINCOS_THRESH || (((1.01971831342099)*x129)) > 1+IKFAST_SINCOS_THRESH )
    continue;
j2=((((-1.0)*x123))+(IKasin(((1.01971831342099)*x129))));
if( (((1.01971830985915)*x129)) < -1-IKFAST_SINCOS_THRESH || (((1.01971830985915)*x129)) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst6=((((-1.0)*x123))+(IKasin(((1.01971830985915)*x129))));
IkReal gconst7=((((-1.0)*py*x131))+((px*x127*x129)));
IkReal gconst8=(((px*x131))+((x122*x127*x128)));
IkReal x135=py*py;
IkReal x136=px*px;
j1eval[0]=(x135+x136);
j1eval[1]=IKsign(((((200.0)*x135))+(((200.0)*x136))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x137=IKPowWithIntegerCheck(IKsign(((((72.4)*px))+(((71.0)*gconst7*py))+(((-71.0)*gconst8*px)))),-1);
if(!x137.valid){
continue;
}
CheckValue<IkReal> x138 = IKatan2WithCheck(IkReal(((((25.702)*gconst7))+(((200.0)*px*py))+(((-25.205)*gconst7*gconst8)))),IkReal(((-26.2088)+(((-25.205)*(gconst8*gconst8)))+(((200.0)*(py*py)))+(((51.404)*gconst8)))),IKFAST_ATAN2_MAGTHRESH);
if(!x138.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x137.value)))+(x138.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x139=IKcos(j1);
IkReal x140=IKsin(j1);
IkReal x141=((0.355)*gconst8);
IkReal x142=((1.0)*px);
IkReal x143=((1.0)*py);
IkReal x144=((0.355)*gconst7);
IkReal x145=(py*x140);
evalcond[0]=((-0.362)+(((-1.0)*x139*x142))+x141+x145);
evalcond[1]=((((-1.0)*x140*x142))+(((-1.0)*x139*x143))+x144);
evalcond[2]=((((-1.0)*x140*x144))+(((0.362)*x139))+(((-1.0)*x139*x141))+px);
evalcond[3]=((((-1.0)*x143))+(((-1.0)*x140*x141))+((x139*x144))+(((0.362)*x140)));
evalcond[4]=((-0.005019)+(((-1.0)*py*x143))+(((-0.724)*px*x139))+(((-1.0)*px*x142))+(((0.724)*x145)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x146=((71.0)*gconst7);
IkReal x147=((71.0)*gconst8);
CheckValue<IkReal> x148 = IKatan2WithCheck(IkReal(((((72.4)*py))+(((-1.0)*py*x147))+((px*x146)))),IkReal(((((-72.4)*px))+((px*x147))+((py*x146)))),IKFAST_ATAN2_MAGTHRESH);
if(!x148.valid){
continue;
}
CheckValue<IkReal> x149=IKPowWithIntegerCheck(IKsign(((((200.0)*(py*py)))+(((200.0)*(px*px))))),-1);
if(!x149.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x148.value)+(((1.5707963267949)*(x149.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x150=IKcos(j1);
IkReal x151=IKsin(j1);
IkReal x152=((0.355)*gconst8);
IkReal x153=((1.0)*px);
IkReal x154=((1.0)*py);
IkReal x155=((0.355)*gconst7);
IkReal x156=(py*x151);
evalcond[0]=((-0.362)+(((-1.0)*x150*x153))+x156+x152);
evalcond[1]=((((-1.0)*x151*x153))+(((-1.0)*x150*x154))+x155);
evalcond[2]=((((0.362)*x150))+(((-1.0)*x151*x155))+(((-1.0)*x150*x152))+px);
evalcond[3]=((((0.362)*x151))+(((-1.0)*x154))+(((-1.0)*x151*x152))+((x150*x155)));
evalcond[4]=((-0.005019)+(((-1.0)*py*x154))+(((-1.0)*px*x153))+(((-0.724)*px*x150))+(((0.724)*x156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x157=py*py;
IkReal x158=((px*px)+x157);
if((x158) < -0.00001)
continue;
IkReal x159=IKabs(IKsqrt(x158));
IkReal x166 = x158;
if(IKabs(x166)==0){
continue;
}
IkReal x160=pow(x166,-0.5);
IkReal x161=(py*x160);
CheckValue<IkReal> x167=IKPowWithIntegerCheck(x159,-1);
if(!x167.valid){
continue;
}
IkReal x162=x167.value;
IkReal x163=((1.01971830985915)*x162);
if((((1.0)+(((-1.03982543146201)*x157*(x162*x162))))) < -0.00001)
continue;
IkReal x164=IKsqrt(((1.0)+(((-1.03982543146201)*x157*(x162*x162)))));
IkReal x165=((1.0)*x164);
if( ((py*x163)) < -1-IKFAST_SINCOS_THRESH || ((py*x163)) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x168 = IKatan2WithCheck(IkReal(py),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x168.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(IKasin((py*x163)))))+(((-1.0)*(x168.value))));
IkReal gconst10=(((x161*x165))+((px*x161*x163)));
IkReal gconst11=((((-1.0)*px*x160*x165))+((x157*x160*x163)));
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x169=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x169.valid){
continue;
}
if( (((1.01971830985915)*py*(x169.value))) < -1-IKFAST_SINCOS_THRESH || (((1.01971830985915)*py*(x169.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x170 = IKatan2WithCheck(IkReal(py),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x170.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(IKasin(((1.01971830985915)*py*(x169.value))))+(x170.value)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
IkReal x171=py*py;
CheckValue<IkReal> x182 = IKatan2WithCheck(IkReal(py),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x182.valid){
continue;
}
IkReal x172=((1.0)*(x182.value));
IkReal x173=x158;
if((x173) < -0.00001)
continue;
IkReal x174=IKabs(IKsqrt(x173));
IkReal x183 = x173;
if(IKabs(x183)==0){
continue;
}
IkReal x175=pow(x183,-0.5);
IkReal x176=(py*x175);
CheckValue<IkReal> x184=IKPowWithIntegerCheck(x174,-1);
if(!x184.valid){
continue;
}
IkReal x177=x184.value;
IkReal x178=(py*x177);
IkReal x179=((1.01971830985915)*x177);
if((((1.0)+(((-1.03982543146201)*x171*(x177*x177))))) < -0.00001)
continue;
IkReal x180=IKsqrt(((1.0)+(((-1.03982543146201)*x171*(x177*x177)))));
IkReal x181=((1.0)*x180);
sj2=gconst10;
cj2=gconst11;
if( (((1.01971831342099)*x178)) < -1-IKFAST_SINCOS_THRESH || (((1.01971831342099)*x178)) > 1+IKFAST_SINCOS_THRESH )
    continue;
j2=((3.14159265)+(((-1.0)*x172))+(((-1.0)*(IKasin(((1.01971831342099)*x178))))));
if( (((1.01971830985915)*x178)) < -1-IKFAST_SINCOS_THRESH || (((1.01971830985915)*x178)) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x172))+(((-1.0)*(IKasin(((1.01971830985915)*x178))))));
IkReal gconst10=(((x176*x181))+((px*x176*x179)));
IkReal gconst11=((((-1.0)*px*x175*x181))+((x171*x175*x179)));
IkReal x185=py*py;
IkReal x186=px*px;
j1eval[0]=(x185+x186);
j1eval[1]=IKsign(((((200.0)*x185))+(((200.0)*x186))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x187=IKPowWithIntegerCheck(IKsign(((((71.0)*gconst11*py))+(((-72.4)*py))+(((71.0)*gconst10*px)))),-1);
if(!x187.valid){
continue;
}
CheckValue<IkReal> x188 = IKatan2WithCheck(IkReal(((-26.2088)+(((51.404)*gconst11))+(((200.0)*(px*px)))+(((-25.205)*(gconst11*gconst11))))),IkReal(((((25.205)*gconst10*gconst11))+(((-25.702)*gconst10))+(((200.0)*px*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x188.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x187.value)))+(x188.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x189=IKcos(j1);
IkReal x190=IKsin(j1);
IkReal x191=((1.0)*px);
IkReal x192=((1.0)*py);
IkReal x193=((0.355)*gconst11);
IkReal x194=((0.355)*gconst10);
IkReal x195=((0.355)*x189);
IkReal x196=(py*x190);
evalcond[0]=((-0.362)+(((-1.0)*x189*x191))+x193+x196);
evalcond[1]=((((-1.0)*x189*x192))+(((-1.0)*x190*x191))+x194);
evalcond[2]=((((-1.0)*x189*x193))+(((-1.0)*x190*x194))+px+(((0.362)*x189)));
evalcond[3]=((((-1.0)*x190*x193))+(((-1.0)*x192))+((x189*x194))+(((0.362)*x190)));
evalcond[4]=((-0.005019)+(((-1.0)*py*x192))+(((-0.724)*px*x189))+(((-1.0)*px*x191))+(((0.724)*x196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x197=((71.0)*gconst10);
IkReal x198=((71.0)*gconst11);
CheckValue<IkReal> x199 = IKatan2WithCheck(IkReal(((((72.4)*py))+(((-1.0)*py*x198))+((px*x197)))),IkReal(((((-72.4)*px))+((px*x198))+((py*x197)))),IKFAST_ATAN2_MAGTHRESH);
if(!x199.valid){
continue;
}
CheckValue<IkReal> x200=IKPowWithIntegerCheck(IKsign(((((200.0)*(py*py)))+(((200.0)*(px*px))))),-1);
if(!x200.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x199.value)+(((1.5707963267949)*(x200.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x201=IKcos(j1);
IkReal x202=IKsin(j1);
IkReal x203=((1.0)*px);
IkReal x204=((1.0)*py);
IkReal x205=((0.355)*gconst11);
IkReal x206=((0.355)*gconst10);
IkReal x207=((0.355)*x201);
IkReal x208=(py*x202);
evalcond[0]=((-0.362)+(((-1.0)*x201*x203))+x205+x208);
evalcond[1]=((((-1.0)*x201*x204))+(((-1.0)*x202*x203))+x206);
evalcond[2]=((((-1.0)*x201*x205))+(((-1.0)*x202*x206))+(((0.362)*x201))+px);
evalcond[3]=(((x201*x206))+(((-1.0)*x202*x205))+(((0.362)*x202))+(((-1.0)*x204)));
evalcond[4]=((-0.005019)+(((-1.0)*px*x203))+(((-1.0)*py*x204))+(((0.724)*x208))+(((-0.724)*px*x201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((px*px)+(py*py));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
j1array[0]=0;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
j1array[0]=0;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x209=(py*sj2);
IkReal x210=(cj2*px);
CheckValue<IkReal> x211=IKPowWithIntegerCheck(((((72.4)*px))+(((-71.0)*x210))+(((71.0)*x209))),-1);
if(!x211.valid){
continue;
}
CheckValue<IkReal> x212=IKPowWithIntegerCheck(((((-14200.0)*x210))+(((14480.0)*px))+(((14200.0)*x209))),-1);
if(!x212.valid){
continue;
}
if( IKabs(((x211.value)*(((((-25.205)*cj2*sj2))+(((25.702)*sj2))+(((200.0)*px*py)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x212.value)*(((5041.0)+(((-5041.0)*(cj2*cj2)))+(((-40000.0)*(px*px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x211.value)*(((((-25.205)*cj2*sj2))+(((25.702)*sj2))+(((200.0)*px*py))))))+IKsqr(((x212.value)*(((5041.0)+(((-5041.0)*(cj2*cj2)))+(((-40000.0)*(px*px)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x211.value)*(((((-25.205)*cj2*sj2))+(((25.702)*sj2))+(((200.0)*px*py))))), ((x212.value)*(((5041.0)+(((-5041.0)*(cj2*cj2)))+(((-40000.0)*(px*px)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x213=IKcos(j1);
IkReal x214=IKsin(j1);
IkReal x215=((0.355)*sj2);
IkReal x216=((1.0)*px);
IkReal x217=((1.0)*py);
IkReal x218=((0.355)*cj2);
IkReal x219=(py*x214);
evalcond[0]=((-0.362)+x218+x219+(((-1.0)*x213*x216)));
evalcond[1]=(x215+(((-1.0)*x213*x217))+(((-1.0)*x214*x216)));
evalcond[2]=((((0.362)*x213))+px+(((-1.0)*x213*x218))+(((-1.0)*x214*x215)));
evalcond[3]=((((0.362)*x214))+((x213*x215))+(((-1.0)*x214*x218))+(((-1.0)*x217)));
evalcond[4]=((0.0082635625)+(((-0.724)*px*x213))+(((-1.0)*py*x217))+(((-1.0)*px*x216))+(((-1.0)*(j0*j0)))+(((2.0)*j0*pz))+(((-1.0)*(pz*pz)))+(((0.724)*x219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x220 = IKatan2WithCheck(IkReal(((-26.2088)+(((-25.205)*(cj2*cj2)))+(((51.404)*cj2))+(((200.0)*(px*px))))),IkReal(((((-25.702)*sj2))+(((25.205)*cj2*sj2))+(((200.0)*px*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x220.valid){
continue;
}
CheckValue<IkReal> x221=IKPowWithIntegerCheck(IKsign(((((71.0)*cj2*py))+(((-72.4)*py))+(((71.0)*px*sj2)))),-1);
if(!x221.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x220.value)+(((1.5707963267949)*(x221.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x222=IKcos(j1);
IkReal x223=IKsin(j1);
IkReal x224=((0.355)*sj2);
IkReal x225=((1.0)*px);
IkReal x226=((1.0)*py);
IkReal x227=((0.355)*cj2);
IkReal x228=(py*x223);
evalcond[0]=((-0.362)+(((-1.0)*x222*x225))+x228+x227);
evalcond[1]=((((-1.0)*x222*x226))+x224+(((-1.0)*x223*x225)));
evalcond[2]=((((-1.0)*x222*x227))+(((0.362)*x222))+(((-1.0)*x223*x224))+px);
evalcond[3]=(((x222*x224))+(((0.362)*x223))+(((-1.0)*x223*x227))+(((-1.0)*x226)));
evalcond[4]=((0.0082635625)+(((0.724)*x228))+(((-1.0)*(j0*j0)))+(((2.0)*j0*pz))+(((-1.0)*py*x226))+(((-1.0)*(pz*pz)))+(((-1.0)*px*x225))+(((-0.724)*px*x222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x229=((71.0)*sj2);
IkReal x230=((71.0)*cj2);
CheckValue<IkReal> x231 = IKatan2WithCheck(IkReal(((((72.4)*py))+(((-1.0)*py*x230))+((px*x229)))),IkReal((((px*x230))+((py*x229))+(((-72.4)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x231.valid){
continue;
}
CheckValue<IkReal> x232=IKPowWithIntegerCheck(IKsign(((((200.0)*(py*py)))+(((200.0)*(px*px))))),-1);
if(!x232.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x231.value)+(((1.5707963267949)*(x232.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x233=IKcos(j1);
IkReal x234=IKsin(j1);
IkReal x235=((0.355)*sj2);
IkReal x236=((1.0)*px);
IkReal x237=((1.0)*py);
IkReal x238=((0.355)*cj2);
IkReal x239=(py*x234);
evalcond[0]=((-0.362)+(((-1.0)*x233*x236))+x238+x239);
evalcond[1]=((((-1.0)*x233*x237))+x235+(((-1.0)*x234*x236)));
evalcond[2]=((((-1.0)*x233*x238))+(((0.362)*x233))+px+(((-1.0)*x234*x235)));
evalcond[3]=(((x233*x235))+(((0.362)*x234))+(((-1.0)*x237))+(((-1.0)*x234*x238)));
evalcond[4]=((0.0082635625)+(((-1.0)*px*x236))+(((-1.0)*py*x237))+(((-0.724)*px*x233))+(((0.724)*x239))+(((-1.0)*(j0*j0)))+(((2.0)*j0*pz))+(((-1.0)*(pz*pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
}
}
return solutions.GetNumSolutions()>0;
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "390598e8d6d5d619ae81f81c3a4e0c5a"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
