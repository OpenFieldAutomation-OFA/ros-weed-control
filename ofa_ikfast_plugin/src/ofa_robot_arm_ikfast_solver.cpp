/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2024-06-06 22:07:17.620402
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5;
x0=IKsin(j[1]);
x1=IKsin(j[2]);
x2=IKcos(j[1]);
x3=IKcos(j[2]);
x4=((0.425)*x0);
x5=((0.425)*x2);
eetrans[0]=((-0.545425)+j[0]);
eetrans[1]=(((x1*x5))+((x3*x4))+(((0.25)*x0)));
eetrans[2]=((-0.062)+(((-0.25)*x2))+((x1*x4))+(((-1.0)*x3*x5)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 3; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x33000003; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_px=((-0.062)+(((-1.0)*pz)));
new_py=py;
new_pz=((0.456875)+px);
px = new_px; py = new_py; pz = new_pz;
pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=((0.08855)+pz);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
cj2array[0]=((-1.18101695294118)+(((4.70588235294118)*(pz*pz)))+(((4.70588235294118)*(j0*j0)))+(((4.70588235294118)*(px*px)))+(((-9.41176470588235)*j0*pz))+(((4.70588235294118)*(py*py))));
if( cj2array[0] >= -1-IKFAST_SINCOS_THRESH && cj2array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j2valid[0] = j2valid[1] = true;
    j2array[0] = IKacos(cj2array[0]);
    sj2array[0] = IKsin(j2array[0]);
    cj2array[1] = cj2array[0];
    j2array[1] = -j2array[0];
    sj2array[1] = -sj2array[0];
}
else if( isnan(cj2array[0]) )
{
    // probably any value will work
    j2valid[0] = true;
    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
}
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j1eval[3];
IkReal x6=px*px;
IkReal x7=py*py;
IkReal x8=((17.0)*cj2);
IkReal x9=((17.0)*sj2);
j1eval[0]=(x7+x6);
j1eval[1]=IKsign(((((40.0)*x7))+(((40.0)*x6))));
j1eval[2]=((IKabs(((((10.0)*px))+((py*x9))+((px*x8)))))+(IKabs(((((-1.0)*px*x9))+(((10.0)*py))+((py*x8))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
IkReal x10=(cj2*py);
IkReal x11=(px*sj2);
j1eval[0]=((((1.7)*x11))+(((1.7)*x10))+py);
j1eval[1]=((IKabs(((2.5)+(((7.225)*(cj2*cj2)))+(((-40.0)*(px*px)))+(((8.5)*cj2)))))+(IKabs(((((4.25)*sj2))+(((7.225)*cj2*sj2))+(((40.0)*px*py))))));
j1eval[2]=IKsign(((((10.0)*py))+(((17.0)*x10))+(((17.0)*x11))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=((((1.7)*cj2*px))+px+(((-1.7)*py*sj2)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x12=px*px;
IkReal x13=((1.7)*px);
IkReal x14=((((2.89)*x12))+(((2.89)*(py*py))));
IkReal x21 = x14;
if(IKabs(x21)==0){
continue;
}
IkReal x15=pow(x21,-0.5);
if((x14) < -0.00001)
continue;
IkReal x16=IKabs(IKsqrt(x14));
CheckValue<IkReal> x22=IKPowWithIntegerCheck(x16,-1);
if(!x22.valid){
continue;
}
IkReal x17=x22.value;
if((((1.0)+(((-1.0)*x12*(x17*x17))))) < -0.00001)
continue;
IkReal x18=IKsqrt(((1.0)+(((-1.0)*x12*(x17*x17)))));
IkReal x19=(x15*x17);
IkReal x20=(x15*x18);
CheckValue<IkReal> x23 = IKatan2WithCheck(IkReal(x13),IkReal(((-1.7)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x23.valid){
continue;
}
if( ((px*x17)) < -1-IKFAST_SINCOS_THRESH || ((px*x17)) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst0=((((-1.0)*(x23.value)))+(((-1.0)*(IKasin((px*x17))))));
IkReal gconst1=(((py*x13*x19))+(((-1.0)*x13*x20)));
IkReal gconst2=((((-1.7)*x12*x19))+(((-1.7)*py*x20)));
CheckValue<IkReal> x24 = IKatan2WithCheck(IkReal(((1.7)*px)),IkReal(((-1.7)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x24.valid){
continue;
}
if((((((2.89)*(py*py)))+(((2.89)*(px*px))))) < -0.00001)
continue;
CheckValue<IkReal> x25=IKPowWithIntegerCheck(IKabs(IKsqrt(((((2.89)*(py*py)))+(((2.89)*(px*px)))))),-1);
if(!x25.valid){
continue;
}
if( ((px*(x25.value))) < -1-IKFAST_SINCOS_THRESH || ((px*(x25.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x24.value)+(IKasin((px*(x25.value))))+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
IkReal x26=px*px;
IkReal x27=((1.7)*px);
IkReal x28=x14;
IkReal x36 = x28;
if(IKabs(x36)==0){
continue;
}
IkReal x29=pow(x36,-0.5);
if((x28) < -0.00001)
continue;
IkReal x30=IKabs(IKsqrt(x28));
CheckValue<IkReal> x37=IKPowWithIntegerCheck(x30,-1);
if(!x37.valid){
continue;
}
IkReal x31=x37.value;
if((((1.0)+(((-1.0)*x26*(x31*x31))))) < -0.00001)
continue;
IkReal x32=IKsqrt(((1.0)+(((-1.0)*x26*(x31*x31)))));
if( ((px*x31)) < -1-IKFAST_SINCOS_THRESH || ((px*x31)) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x38 = IKatan2WithCheck(IkReal(x27),IkReal(((-1.7)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x38.valid){
continue;
}
IkReal x33=((((-1.0)*(IKasin((px*x31)))))+(((-1.0)*(x38.value))));
IkReal x34=(x29*x31);
IkReal x35=(x29*x32);
sj2=gconst1;
cj2=gconst2;
j2=x33;
IkReal gconst0=x33;
IkReal gconst1=((((-1.0)*x27*x35))+((py*x27*x34)));
IkReal gconst2=((((-1.7)*x26*x34))+(((-1.7)*py*x35)));
IkReal x39=px*px;
IkReal x40=py*py;
j1eval[0]=(x39+x40);
j1eval[1]=IKsign(((((40.0)*x40))+(((40.0)*x39))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x41=IKPowWithIntegerCheck(IKsign(((((17.0)*gconst2*py))+(((17.0)*gconst1*px))+(((10.0)*py)))),-1);
if(!x41.valid){
continue;
}
CheckValue<IkReal> x42 = IKatan2WithCheck(IkReal(((2.5)+(((8.5)*gconst2))+(((7.225)*(gconst2*gconst2)))+(((-40.0)*(px*px))))),IkReal(((((4.25)*gconst1))+(((7.225)*gconst1*gconst2))+(((40.0)*px*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x42.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x41.value)))+(x42.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x43=IKcos(j1);
IkReal x44=IKsin(j1);
IkReal x45=((0.425)*gconst1);
IkReal x46=((0.425)*gconst2);
IkReal x47=((1.0)*px);
IkReal x48=((1.0)*py);
IkReal x49=(py*x44);
IkReal x50=((0.425)*x43);
evalcond[0]=((((-1.0)*x43*x48))+x45+((px*x44)));
evalcond[1]=((0.25)+(((-1.0)*x43*x47))+(((-1.0)*x44*x48))+x46);
evalcond[2]=((((0.25)*x43))+(((-1.0)*x47))+((x43*x46))+(((-1.0)*x44*x45)));
evalcond[3]=((((0.25)*x44))+(((-1.0)*x48))+((x43*x45))+((x44*x46)));
evalcond[4]=((0.118125)+(((0.5)*x49))+(((-1.0)*py*x48))+(((0.5)*px*x43))+(((-1.0)*px*x47)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x51=((17.0)*px);
IkReal x52=((17.0)*py);
CheckValue<IkReal> x53=IKPowWithIntegerCheck(IKsign(((((40.0)*(px*px)))+(((40.0)*(py*py))))),-1);
if(!x53.valid){
continue;
}
CheckValue<IkReal> x54 = IKatan2WithCheck(IkReal((((gconst2*x52))+(((-1.0)*gconst1*x51))+(((10.0)*py)))),IkReal((((gconst2*x51))+(((10.0)*px))+((gconst1*x52)))),IKFAST_ATAN2_MAGTHRESH);
if(!x54.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x53.value)))+(x54.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x55=IKcos(j1);
IkReal x56=IKsin(j1);
IkReal x57=((0.425)*gconst1);
IkReal x58=((0.425)*gconst2);
IkReal x59=((1.0)*px);
IkReal x60=((1.0)*py);
IkReal x61=(py*x56);
IkReal x62=((0.425)*x55);
evalcond[0]=((((-1.0)*x55*x60))+((px*x56))+x57);
evalcond[1]=((0.25)+(((-1.0)*x56*x60))+(((-1.0)*x55*x59))+x58);
evalcond[2]=((((-1.0)*x56*x57))+(((0.25)*x55))+(((-1.0)*x59))+((x55*x58)));
evalcond[3]=(((x56*x58))+(((0.25)*x56))+(((-1.0)*x60))+((x55*x57)));
evalcond[4]=((0.118125)+(((-1.0)*px*x59))+(((0.5)*px*x55))+(((0.5)*x61))+(((-1.0)*py*x60)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x63=px*px;
IkReal x64=((1.7)*px);
IkReal x65=((((2.89)*x63))+(((2.89)*(py*py))));
IkReal x72 = x65;
if(IKabs(x72)==0){
continue;
}
IkReal x66=pow(x72,-0.5);
if((x65) < -0.00001)
continue;
IkReal x67=IKabs(IKsqrt(x65));
CheckValue<IkReal> x73=IKPowWithIntegerCheck(x67,-1);
if(!x73.valid){
continue;
}
IkReal x68=x73.value;
if((((1.0)+(((-1.0)*x63*(x68*x68))))) < -0.00001)
continue;
IkReal x69=IKsqrt(((1.0)+(((-1.0)*x63*(x68*x68)))));
IkReal x70=(x66*x68);
IkReal x71=(x66*x69);
if( ((px*x68)) < -1-IKFAST_SINCOS_THRESH || ((px*x68)) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x74 = IKatan2WithCheck(IkReal(x64),IkReal(((-1.7)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x74.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(IKasin((px*x68)))+(((-1.0)*(x74.value))));
IkReal gconst4=(((py*x64*x70))+((x64*x71)));
IkReal gconst5=((((-1.7)*x63*x70))+(((1.7)*py*x71)));
CheckValue<IkReal> x75 = IKatan2WithCheck(IkReal(((1.7)*px)),IkReal(((-1.7)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x75.valid){
continue;
}
if((((((2.89)*(py*py)))+(((2.89)*(px*px))))) < -0.00001)
continue;
CheckValue<IkReal> x76=IKPowWithIntegerCheck(IKabs(IKsqrt(((((2.89)*(py*py)))+(((2.89)*(px*px)))))),-1);
if(!x76.valid){
continue;
}
if( ((px*(x76.value))) < -1-IKFAST_SINCOS_THRESH || ((px*(x76.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x75.value)+(((-1.0)*(IKasin((px*(x76.value))))))+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
IkReal x77=px*px;
IkReal x78=((1.7)*px);
CheckValue<IkReal> x88 = IKatan2WithCheck(IkReal(x78),IkReal(((-1.7)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x88.valid){
continue;
}
IkReal x79=((1.0)*(x88.value));
IkReal x80=x65;
IkReal x89 = x80;
if(IKabs(x89)==0){
continue;
}
IkReal x81=pow(x89,-0.5);
if((x80) < -0.00001)
continue;
IkReal x82=IKabs(IKsqrt(x80));
CheckValue<IkReal> x90=IKPowWithIntegerCheck(x82,-1);
if(!x90.valid){
continue;
}
IkReal x83=x90.value;
if( ((px*x83)) < -1-IKFAST_SINCOS_THRESH || ((px*x83)) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x84=IKasin((px*x83));
if((((1.0)+(((-1.0)*x77*(x83*x83))))) < -0.00001)
continue;
IkReal x85=IKsqrt(((1.0)+(((-1.0)*x77*(x83*x83)))));
IkReal x86=(x81*x83);
IkReal x87=(x81*x85);
sj2=gconst4;
cj2=gconst5;
j2=((3.14159265)+(((-1.0)*x79))+x84);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x79))+x84);
IkReal gconst4=(((x78*x87))+((py*x78*x86)));
IkReal gconst5=((((1.7)*py*x87))+(((-1.7)*x77*x86)));
IkReal x91=px*px;
IkReal x92=py*py;
j1eval[0]=(x91+x92);
j1eval[1]=IKsign(((((40.0)*x91))+(((40.0)*x92))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x93 = IKatan2WithCheck(IkReal(((2.5)+(((8.5)*gconst5))+(((7.225)*(gconst5*gconst5)))+(((-40.0)*(px*px))))),IkReal(((((4.25)*gconst4))+(((7.225)*gconst4*gconst5))+(((40.0)*px*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x93.valid){
continue;
}
CheckValue<IkReal> x94=IKPowWithIntegerCheck(IKsign(((((17.0)*gconst4*px))+(((10.0)*py))+(((17.0)*gconst5*py)))),-1);
if(!x94.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x93.value)+(((1.5707963267949)*(x94.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x95=IKcos(j1);
IkReal x96=IKsin(j1);
IkReal x97=((1.0)*py);
IkReal x98=((1.0)*px);
IkReal x99=((0.425)*gconst4);
IkReal x100=((0.425)*gconst5);
IkReal x101=((0.425)*x96);
evalcond[0]=((((-1.0)*x95*x97))+x99+((px*x96)));
evalcond[1]=((0.25)+(((-1.0)*x95*x98))+x100+(((-1.0)*x96*x97)));
evalcond[2]=(((x100*x95))+(((-1.0)*x98))+(((0.25)*x95))+(((-1.0)*x96*x99)));
evalcond[3]=(((x100*x96))+(((-1.0)*x97))+((x95*x99))+(((0.25)*x96)));
evalcond[4]=((0.118125)+(((0.5)*px*x95))+(((0.5)*py*x96))+(((-1.0)*px*x98))+(((-1.0)*py*x97)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x102=((17.0)*gconst4);
IkReal x103=((17.0)*gconst5);
CheckValue<IkReal> x104=IKPowWithIntegerCheck(IKsign(((((40.0)*(px*px)))+(((40.0)*(py*py))))),-1);
if(!x104.valid){
continue;
}
CheckValue<IkReal> x105 = IKatan2WithCheck(IkReal(((((-1.0)*px*x102))+((py*x103))+(((10.0)*py)))),IkReal((((py*x102))+((px*x103))+(((10.0)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x105.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x104.value)))+(x105.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x106=IKcos(j1);
IkReal x107=IKsin(j1);
IkReal x108=((1.0)*py);
IkReal x109=((1.0)*px);
IkReal x110=((0.425)*gconst4);
IkReal x111=((0.425)*gconst5);
IkReal x112=((0.425)*x107);
evalcond[0]=((((-1.0)*x106*x108))+x110+((px*x107)));
evalcond[1]=((0.25)+(((-1.0)*x107*x108))+(((-1.0)*x106*x109))+x111);
evalcond[2]=(((x106*x111))+(((-1.0)*x107*x110))+(((-1.0)*x109))+(((0.25)*x106)));
evalcond[3]=(((x106*x110))+(((-1.0)*x108))+((x107*x111))+(((0.25)*x107)));
evalcond[4]=((0.118125)+(((0.5)*py*x107))+(((-1.0)*px*x109))+(((0.5)*px*x106))+(((-1.0)*py*x108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x113=py*py;
IkReal x114=((1.7)*py);
IkReal x115=((1.7)*px);
IkReal x116=((((2.89)*x113))+(((2.89)*(px*px))));
if((x116) < -0.00001)
continue;
IkReal x117=IKabs(IKsqrt(x116));
IkReal x123 = x116;
if(IKabs(x123)==0){
continue;
}
IkReal x118=pow(x123,-0.5);
CheckValue<IkReal> x124=IKPowWithIntegerCheck(x117,-1);
if(!x124.valid){
continue;
}
IkReal x119=x124.value;
IkReal x120=(py*x119);
if((((1.0)+(((-1.0)*x113*(x119*x119))))) < -0.00001)
continue;
IkReal x121=IKsqrt(((1.0)+(((-1.0)*x113*(x119*x119)))));
IkReal x122=(x118*x121);
if( (x120) < -1-IKFAST_SINCOS_THRESH || (x120) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x125 = IKatan2WithCheck(IkReal(x114),IkReal(x115),IKFAST_ATAN2_MAGTHRESH);
if(!x125.valid){
continue;
}
IkReal gconst6=((((-1.0)*(IKasin(x120))))+(((-1.0)*(x125.value))));
IkReal gconst7=((((-1.0)*px*x114*x118*x119))+(((-1.0)*x114*x122)));
IkReal gconst8=((((-1.7)*x113*x118*x119))+((x115*x122)));
CheckValue<IkReal> x126 = IKatan2WithCheck(IkReal(((1.7)*py)),IkReal(((1.7)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x126.valid){
continue;
}
if((((((2.89)*(py*py)))+(((2.89)*(px*px))))) < -0.00001)
continue;
CheckValue<IkReal> x127=IKPowWithIntegerCheck(IKabs(IKsqrt(((((2.89)*(py*py)))+(((2.89)*(px*px)))))),-1);
if(!x127.valid){
continue;
}
if( ((py*(x127.value))) < -1-IKFAST_SINCOS_THRESH || ((py*(x127.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x126.value)+(IKasin((py*(x127.value))))+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
IkReal x128=py*py;
IkReal x129=((1.7)*py);
IkReal x130=((1.7)*px);
IkReal x131=x116;
if((x131) < -0.00001)
continue;
IkReal x132=IKabs(IKsqrt(x131));
IkReal x139 = x131;
if(IKabs(x139)==0){
continue;
}
IkReal x133=pow(x139,-0.5);
CheckValue<IkReal> x140=IKPowWithIntegerCheck(x132,-1);
if(!x140.valid){
continue;
}
IkReal x134=x140.value;
IkReal x135=(py*x134);
if((((1.0)+(((-1.0)*x128*(x134*x134))))) < -0.00001)
continue;
IkReal x136=IKsqrt(((1.0)+(((-1.0)*x128*(x134*x134)))));
if( (x135) < -1-IKFAST_SINCOS_THRESH || (x135) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x141 = IKatan2WithCheck(IkReal(x129),IkReal(x130),IKFAST_ATAN2_MAGTHRESH);
if(!x141.valid){
continue;
}
IkReal x137=((((-1.0)*(IKasin(x135))))+(((-1.0)*(x141.value))));
IkReal x138=(x133*x136);
sj2=gconst7;
cj2=gconst8;
j2=x137;
IkReal gconst6=x137;
IkReal gconst7=((((-1.0)*px*x129*x133*x134))+(((-1.0)*x129*x138)));
IkReal gconst8=((((-1.7)*x128*x133*x134))+((x130*x138)));
IkReal x142=px*px;
IkReal x143=py*py;
j1eval[0]=(x142+x143);
j1eval[1]=IKsign(((((40.0)*x142))+(((40.0)*x143))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x144 = IKatan2WithCheck(IkReal(((((-7.225)*gconst7*gconst8))+(((-4.25)*gconst7))+(((40.0)*px*py)))),IkReal(((2.5)+(((8.5)*gconst8))+(((7.225)*(gconst8*gconst8)))+(((-40.0)*(py*py))))),IKFAST_ATAN2_MAGTHRESH);
if(!x144.valid){
continue;
}
CheckValue<IkReal> x145=IKPowWithIntegerCheck(IKsign(((((-17.0)*gconst7*py))+(((17.0)*gconst8*px))+(((10.0)*px)))),-1);
if(!x145.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x144.value)+(((1.5707963267949)*(x145.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x146=IKcos(j1);
IkReal x147=IKsin(j1);
IkReal x148=((0.425)*gconst8);
IkReal x149=((1.0)*py);
IkReal x150=((0.425)*gconst7);
IkReal x151=((1.0)*px);
evalcond[0]=(x150+(((-1.0)*x146*x149))+((px*x147)));
evalcond[1]=((0.25)+x148+(((-1.0)*x147*x149))+(((-1.0)*x146*x151)));
evalcond[2]=((((-1.0)*x151))+(((0.25)*x146))+(((-1.0)*x147*x150))+((x146*x148)));
evalcond[3]=((((-1.0)*x149))+(((0.25)*x147))+((x146*x150))+((x147*x148)));
evalcond[4]=((0.118125)+(((-1.0)*py*x149))+(((0.5)*py*x147))+(((0.5)*px*x146))+(((-1.0)*px*x151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x152=((17.0)*px);
IkReal x153=((17.0)*py);
CheckValue<IkReal> x154 = IKatan2WithCheck(IkReal(((((10.0)*py))+(((-1.0)*gconst7*x152))+((gconst8*x153)))),IkReal(((((10.0)*px))+((gconst8*x152))+((gconst7*x153)))),IKFAST_ATAN2_MAGTHRESH);
if(!x154.valid){
continue;
}
CheckValue<IkReal> x155=IKPowWithIntegerCheck(IKsign(((((40.0)*(px*px)))+(((40.0)*(py*py))))),-1);
if(!x155.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x154.value)+(((1.5707963267949)*(x155.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x156=IKcos(j1);
IkReal x157=IKsin(j1);
IkReal x158=((0.425)*gconst8);
IkReal x159=((1.0)*py);
IkReal x160=((0.425)*gconst7);
IkReal x161=((1.0)*px);
evalcond[0]=(x160+(((-1.0)*x156*x159))+((px*x157)));
evalcond[1]=((0.25)+(((-1.0)*x157*x159))+x158+(((-1.0)*x156*x161)));
evalcond[2]=((((-1.0)*x157*x160))+(((-1.0)*x161))+(((0.25)*x156))+((x156*x158)));
evalcond[3]=((((-1.0)*x159))+((x157*x158))+(((0.25)*x157))+((x156*x160)));
evalcond[4]=((0.118125)+(((-1.0)*py*x159))+(((0.5)*py*x157))+(((0.5)*px*x156))+(((-1.0)*px*x161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x162=py*py;
IkReal x163=((1.7)*py);
IkReal x164=((1.7)*px);
IkReal x165=((((2.89)*x162))+(((2.89)*(px*px))));
if((x165) < -0.00001)
continue;
IkReal x166=IKabs(IKsqrt(x165));
IkReal x172 = x165;
if(IKabs(x172)==0){
continue;
}
IkReal x167=pow(x172,-0.5);
CheckValue<IkReal> x173=IKPowWithIntegerCheck(x166,-1);
if(!x173.valid){
continue;
}
IkReal x168=x173.value;
IkReal x169=(py*x168);
if((((1.0)+(((-1.0)*x162*(x168*x168))))) < -0.00001)
continue;
IkReal x170=IKsqrt(((1.0)+(((-1.0)*x162*(x168*x168)))));
IkReal x171=(x167*x170);
if( (x169) < -1-IKFAST_SINCOS_THRESH || (x169) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x174 = IKatan2WithCheck(IkReal(x163),IkReal(x164),IKFAST_ATAN2_MAGTHRESH);
if(!x174.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(IKasin(x169))+(((-1.0)*(x174.value))));
IkReal gconst10=((((-1.0)*px*x163*x167*x168))+((x163*x171)));
IkReal gconst11=((((-1.7)*x162*x167*x168))+(((-1.0)*x164*x171)));
if((((((2.89)*(py*py)))+(((2.89)*(px*px))))) < -0.00001)
continue;
CheckValue<IkReal> x175=IKPowWithIntegerCheck(IKabs(IKsqrt(((((2.89)*(py*py)))+(((2.89)*(px*px)))))),-1);
if(!x175.valid){
continue;
}
if( ((py*(x175.value))) < -1-IKFAST_SINCOS_THRESH || ((py*(x175.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x176 = IKatan2WithCheck(IkReal(((1.7)*py)),IkReal(((1.7)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x176.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(((-1.0)*(IKasin((py*(x175.value))))))+(x176.value)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
IkReal x177=py*py;
IkReal x178=((1.7)*py);
IkReal x179=((1.7)*px);
CheckValue<IkReal> x189 = IKatan2WithCheck(IkReal(x178),IkReal(x179),IKFAST_ATAN2_MAGTHRESH);
if(!x189.valid){
continue;
}
IkReal x180=((1.0)*(x189.value));
IkReal x181=x165;
if((x181) < -0.00001)
continue;
IkReal x182=IKabs(IKsqrt(x181));
IkReal x190 = x181;
if(IKabs(x190)==0){
continue;
}
IkReal x183=pow(x190,-0.5);
CheckValue<IkReal> x191=IKPowWithIntegerCheck(x182,-1);
if(!x191.valid){
continue;
}
IkReal x184=x191.value;
IkReal x185=(py*x184);
if( (x185) < -1-IKFAST_SINCOS_THRESH || (x185) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x186=IKasin(x185);
if((((1.0)+(((-1.0)*x177*(x184*x184))))) < -0.00001)
continue;
IkReal x187=IKsqrt(((1.0)+(((-1.0)*x177*(x184*x184)))));
IkReal x188=(x183*x187);
sj2=gconst10;
cj2=gconst11;
j2=((3.14159265)+(((-1.0)*x180))+x186);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x180))+x186);
IkReal gconst10=((((-1.0)*px*x178*x183*x184))+((x178*x188)));
IkReal gconst11=((((-1.7)*x177*x183*x184))+(((-1.0)*x179*x188)));
IkReal x192=px*px;
IkReal x193=py*py;
j1eval[0]=(x193+x192);
j1eval[1]=IKsign(((((40.0)*x193))+(((40.0)*x192))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x194=IKPowWithIntegerCheck(IKsign(((((17.0)*gconst10*px))+(((10.0)*py))+(((17.0)*gconst11*py)))),-1);
if(!x194.valid){
continue;
}
CheckValue<IkReal> x195 = IKatan2WithCheck(IkReal(((2.5)+(((-40.0)*(px*px)))+(((8.5)*gconst11))+(((7.225)*(gconst11*gconst11))))),IkReal(((((7.225)*gconst10*gconst11))+(((4.25)*gconst10))+(((40.0)*px*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x195.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x194.value)))+(x195.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x196=IKcos(j1);
IkReal x197=IKsin(j1);
IkReal x198=((1.0)*py);
IkReal x199=((1.0)*px);
IkReal x200=((0.425)*x196);
IkReal x201=((0.425)*x197);
evalcond[0]=((((-1.0)*x196*x198))+(((0.425)*gconst10))+((px*x197)));
evalcond[1]=((0.25)+(((-1.0)*x196*x199))+(((-1.0)*x197*x198))+(((0.425)*gconst11)));
evalcond[2]=((((0.25)*x196))+(((-1.0)*x199))+(((-1.0)*gconst10*x201))+((gconst11*x200)));
evalcond[3]=((((0.25)*x197))+(((-1.0)*x198))+((gconst11*x201))+((gconst10*x200)));
evalcond[4]=((0.118125)+(((-1.0)*py*x198))+(((0.5)*py*x197))+(((0.5)*px*x196))+(((-1.0)*px*x199)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x202=((17.0)*py);
IkReal x203=((17.0)*px);
CheckValue<IkReal> x204 = IKatan2WithCheck(IkReal(((((10.0)*py))+(((-1.0)*gconst10*x203))+((gconst11*x202)))),IkReal(((((10.0)*px))+((gconst11*x203))+((gconst10*x202)))),IKFAST_ATAN2_MAGTHRESH);
if(!x204.valid){
continue;
}
CheckValue<IkReal> x205=IKPowWithIntegerCheck(IKsign(((((40.0)*(px*px)))+(((40.0)*(py*py))))),-1);
if(!x205.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x204.value)+(((1.5707963267949)*(x205.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x206=IKcos(j1);
IkReal x207=IKsin(j1);
IkReal x208=((1.0)*py);
IkReal x209=((1.0)*px);
IkReal x210=((0.425)*x206);
IkReal x211=((0.425)*x207);
evalcond[0]=(((px*x207))+(((-1.0)*x206*x208))+(((0.425)*gconst10)));
evalcond[1]=((0.25)+(((-1.0)*x206*x209))+(((-1.0)*x207*x208))+(((0.425)*gconst11)));
evalcond[2]=((((-1.0)*gconst10*x211))+(((0.25)*x206))+((gconst11*x210))+(((-1.0)*x209)));
evalcond[3]=((((0.25)*x207))+((gconst11*x211))+((gconst10*x210))+(((-1.0)*x208)));
evalcond[4]=((0.118125)+(((-1.0)*px*x209))+(((-1.0)*py*x208))+(((0.5)*px*x206))+(((0.5)*py*x207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((px*px)+(py*py));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
j1array[0]=0;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
j1array[0]=0;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x212=(cj2*px);
IkReal x213=(py*sj2);
CheckValue<IkReal> x214=IKPowWithIntegerCheck(((((-17.0)*x213))+(((17.0)*x212))+(((10.0)*px))),-1);
if(!x214.valid){
continue;
}
CheckValue<IkReal> x215=IKPowWithIntegerCheck(((((-680.0)*x213))+(((680.0)*x212))+(((400.0)*px))),-1);
if(!x215.valid){
continue;
}
if( IKabs(((x214.value)*(((((-7.225)*cj2*sj2))+(((40.0)*px*py))+(((-4.25)*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x215.value)*(((-289.0)+(((1600.0)*(px*px)))+(((289.0)*(cj2*cj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x214.value)*(((((-7.225)*cj2*sj2))+(((40.0)*px*py))+(((-4.25)*sj2))))))+IKsqr(((x215.value)*(((-289.0)+(((1600.0)*(px*px)))+(((289.0)*(cj2*cj2)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x214.value)*(((((-7.225)*cj2*sj2))+(((40.0)*px*py))+(((-4.25)*sj2))))), ((x215.value)*(((-289.0)+(((1600.0)*(px*px)))+(((289.0)*(cj2*cj2)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x216=IKcos(j1);
IkReal x217=IKsin(j1);
IkReal x218=((0.425)*sj2);
IkReal x219=((1.0)*py);
IkReal x220=((0.425)*cj2);
IkReal x221=((1.0)*px);
evalcond[0]=(x218+((px*x217))+(((-1.0)*x216*x219)));
evalcond[1]=((0.25)+(((-1.0)*x216*x221))+x220+(((-1.0)*x217*x219)));
evalcond[2]=(((x216*x220))+(((-1.0)*x217*x218))+(((0.25)*x216))+(((-1.0)*x221)));
evalcond[3]=(((x216*x218))+((x217*x220))+(((-1.0)*x219))+(((0.25)*x217)));
evalcond[4]=((0.1259661025)+(((-1.0)*py*x219))+(((-1.0)*(j0*j0)))+(((2.0)*j0*pz))+(((-1.0)*(pz*pz)))+(((-1.0)*px*x221))+(((0.5)*py*x217))+(((0.5)*px*x216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x222 = IKatan2WithCheck(IkReal(((2.5)+(((7.225)*(cj2*cj2)))+(((-40.0)*(px*px)))+(((8.5)*cj2)))),IkReal(((((4.25)*sj2))+(((7.225)*cj2*sj2))+(((40.0)*px*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x222.valid){
continue;
}
CheckValue<IkReal> x223=IKPowWithIntegerCheck(IKsign(((((17.0)*px*sj2))+(((10.0)*py))+(((17.0)*cj2*py)))),-1);
if(!x223.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x222.value)+(((1.5707963267949)*(x223.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x224=IKcos(j1);
IkReal x225=IKsin(j1);
IkReal x226=((0.425)*sj2);
IkReal x227=((1.0)*py);
IkReal x228=((0.425)*cj2);
IkReal x229=((1.0)*px);
evalcond[0]=((((-1.0)*x224*x227))+x226+((px*x225)));
evalcond[1]=((0.25)+(((-1.0)*x224*x229))+(((-1.0)*x225*x227))+x228);
evalcond[2]=(((x224*x228))+(((-1.0)*x225*x226))+(((0.25)*x224))+(((-1.0)*x229)));
evalcond[3]=(((x224*x226))+((x225*x228))+(((0.25)*x225))+(((-1.0)*x227)));
evalcond[4]=((0.1259661025)+(((-1.0)*(j0*j0)))+(((2.0)*j0*pz))+(((-1.0)*py*x227))+(((-1.0)*(pz*pz)))+(((0.5)*px*x224))+(((-1.0)*px*x229))+(((0.5)*py*x225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x230=((17.0)*cj2);
IkReal x231=((17.0)*sj2);
CheckValue<IkReal> x232=IKPowWithIntegerCheck(IKsign(((((40.0)*(px*px)))+(((40.0)*(py*py))))),-1);
if(!x232.valid){
continue;
}
CheckValue<IkReal> x233 = IKatan2WithCheck(IkReal(((((-1.0)*px*x231))+(((10.0)*py))+((py*x230)))),IkReal((((px*x230))+(((10.0)*px))+((py*x231)))),IKFAST_ATAN2_MAGTHRESH);
if(!x233.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x232.value)))+(x233.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x234=IKcos(j1);
IkReal x235=IKsin(j1);
IkReal x236=((0.425)*sj2);
IkReal x237=((1.0)*py);
IkReal x238=((0.425)*cj2);
IkReal x239=((1.0)*px);
evalcond[0]=(((px*x235))+x236+(((-1.0)*x234*x237)));
evalcond[1]=((0.25)+(((-1.0)*x235*x237))+x238+(((-1.0)*x234*x239)));
evalcond[2]=(((x234*x238))+(((-1.0)*x235*x236))+(((0.25)*x234))+(((-1.0)*x239)));
evalcond[3]=(((x234*x236))+(((0.25)*x235))+(((-1.0)*x237))+((x235*x238)));
evalcond[4]=((0.1259661025)+(((-1.0)*px*x239))+(((-1.0)*py*x237))+(((-1.0)*(j0*j0)))+(((0.5)*px*x234))+(((0.5)*py*x235))+(((2.0)*j0*pz))+(((-1.0)*(pz*pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
}
}
return solutions.GetNumSolutions()>0;
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "97517f8041cb94318517f5ae73c9a7fb"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
